export declare class ConversationNotificationMethods {
    send({ conversationId, notification }: {
        conversationId: string;
        notification: Map<string, any>;
    }): Promise<any>;
}
declare enum MessageType {
    UserMessage = "UserMessage",
    SystemMessage = "SystemMessage"
}
interface Message {
    text: string;
    sender?: string;
    type: MessageType;
    attachmentToken?: string;
    custom?: Map<string, any>;
}
export declare class ConversationMessageMethods {
    send({ conversationId, messages }: {
        conversationId: string;
        messages: Array<Message>;
    }): Promise<any>;
    get(conversationId: string, messageId: string): Promise<any>;
    update({ conversationId, messageId, message }: {
        conversationId: string;
        messageId: string;
        message: Map<string, any>;
    }): Promise<any>;
    list({ conversationId, limit, startingAfter }: {
        conversationId: string;
        limit?: number;
        startingAfter?: string;
    }): AsyncGenerator<any, void, unknown>;
}
declare class ConversationParticipantMethods {
    add({ conversationId, userId, details }: {
        conversationId: string;
        userId: string;
        details: Map<string, any>;
    }): Promise<any>;
    update({ conversationId, userId, details }: {
        conversationId: string;
        userId: string;
        details: Map<string, any>;
    }): Promise<any>;
    remove({ conversationId, userId }: {
        conversationId: string;
        userId: string;
    }): Promise<any>;
}
interface Conversation {
    id?: string;
    participants?: Map<string, Map<string, string>>;
    subject?: string;
    welcomeMessages?: Array<string>;
    photoUrl?: string;
    custom?: Map<string, string>;
}
export default class ConversationMethods {
    notifications: ConversationNotificationMethods;
    messages: ConversationMessageMethods;
    participants: ConversationParticipantMethods;
    create(conversationId: string, conversation: Conversation): Promise<any>;
    get(conversationId: string): Promise<Conversation>;
    update(conversationId: string, conversation: Conversation): Promise<any>;
    list({ limit, startingAfter, lastMessageAfter, lastMessageBefore, filter }?: {
        limit?: number;
        startingAfter?: string;
        lastMessageAfter?: number;
        lastMessageBefore?: number;
        filter?: Map<string, any>;
    }): AsyncGenerator<Conversation>;
}
export {};
