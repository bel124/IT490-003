"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const got = require('got');
const crypto_1 = require("crypto");
const UserMethods_1 = require("./UserMethods");
const ConversationMethods_1 = require("./ConversationMethods");
const ImportMethods_1 = require("./ImportMethods");
/**
 * A helper method to predictably compute a Conversation ID
 * based on participants' ids in the given conversation.
 *
 * @param userId1 - The id of the first participant
 * @param userId2 - The id of the second participant
 */
function oneOnOneId(userId1, userId2) {
    const sorted = [userId1, userId2].sort();
    const encoded = JSON.stringify(sorted);
    // Calculate the sha1
    const sha = crypto_1.createHash('sha1');
    sha.update(encoded);
    const hash = sha.digest('hex');
    return hash.slice(0, 20);
}
exports.oneOnOneId = oneOnOneId;
class TalkJS {
    constructor({ baseUrl = 'https://api.talkjs.com', appId, apiKey }) {
        baseUrl = baseUrl + `/v1/${appId}`;
        const client = got.extend({
            baseUrl,
            json: true,
            headers: {
                Authorization: `Bearer ${apiKey}`
            }
        });
        async function request(method, url, options) {
            try {
                const resp = await client[method](url, options);
                return resp.body.data || resp.body;
            }
            catch (e) {
                console.log(e.body);
                throw e;
            }
        }
        ;
        this.users = new UserMethods_1.default(request);
        this.conversations = new ConversationMethods_1.default(request);
        this.import = new ImportMethods_1.default(request);
    }
}
exports.TalkJS = TalkJS;
//# sourceMappingURL=index.js.map