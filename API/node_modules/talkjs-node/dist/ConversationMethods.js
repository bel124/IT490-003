"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class ConversationNotificationMethods {
    /**
        @internal
        @hidden
    */
    constructor(request) {
        this._request = request;
    }
    async send({ conversationId, notification }) {
        return this._request('post', `/conversations/${conversationId}/notifications`, {
            body: notification
        });
    }
}
exports.ConversationNotificationMethods = ConversationNotificationMethods;
var MessageType;
(function (MessageType) {
    MessageType["UserMessage"] = "UserMessage";
    MessageType["SystemMessage"] = "SystemMessage";
})(MessageType || (MessageType = {}));
class ConversationMessageMethods {
    /**
        @internal
        @hidden
    */
    constructor(request) {
        this._request = request;
    }
    async send({ conversationId, messages }) {
        return this._request('post', `/conversations/${conversationId}/messages`, {
            body: messages
        });
    }
    async get(conversationId, messageId) {
        return this._request('get', `/conversations/${conversationId}/messages/${messageId}`);
    }
    async update({ conversationId, messageId, message }) {
        return this._request('post', `/conversations/${conversationId}/messages/${messageId}`, {
            body: message
        });
    }
    async *list({ conversationId, limit = 10, startingAfter }) {
        yield* util_1.paginate({
            request: this._request,
            url: `/conversations/${conversationId}/messages`,
            query: {
                limit,
                startingAfter
            }
        });
    }
}
exports.ConversationMessageMethods = ConversationMessageMethods;
class ConversationParticipantMethods {
    /**
        @internal
        @hidden
    */
    constructor(request) {
        this._request = request;
    }
    async add({ conversationId, userId, details }) {
        return this._request('put', `/conversations/${conversationId}/participants/${userId}`, {
            body: details
        });
    }
    async update({ conversationId, userId, details }) {
        return this._request('patch', `/conversations/${conversationId}/participants/${userId}`, {
            body: details
        });
    }
    async remove({ conversationId, userId }) {
        return this._request('delete', `/conversations/${conversationId}/participants/${userId}`);
    }
}
class ConversationMethods {
    /**
        @internal
        @hidden
    */
    constructor(request) {
        this._request = request;
        this.notifications = new ConversationNotificationMethods(this._request);
        this.messages = new ConversationMessageMethods(this._request);
        this.participants = new ConversationParticipantMethods(this._request);
    }
    async create(conversationId, conversation) {
        return this.update(conversationId, conversation);
    }
    async get(conversationId) {
        return this._request('get', `/conversations/${conversationId}`);
    }
    async update(conversationId, conversation) {
        return this._request('put', `/conversations/${conversationId}`, {
            body: conversation
        });
    }
    async *list({ limit = 10, startingAfter, lastMessageAfter, lastMessageBefore, filter } = {}) {
        const query = {
            limit,
            startingAfter,
            lastMessageAfter,
            lastMessageBefore,
            filter: undefined
        };
        if (filter)
            query.filter = encodeURIComponent(JSON.stringify(filter));
        yield* util_1.paginate({
            request: this._request,
            url: '/conversations',
            query
        });
    }
}
exports.default = ConversationMethods;
//# sourceMappingURL=ConversationMethods.js.map