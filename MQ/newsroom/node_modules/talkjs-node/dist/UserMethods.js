"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class UserSessionMethods {
    /**
        @internal
        @hidden
    */
    constructor(request) {
        this._request = request;
    }
    async *list({ userId }) {
        yield* util_1.paginate({
            request: this._request,
            url: `/users/${userId}/sessions`
        });
    }
}
class UserConversationMethods {
    /**
        @internal
        @hidden
    */
    constructor(request) {
        this._request = request;
    }
    async *list({ userId, limit = 10, startingAfter, lastMessageAfter, lastMessageBefore, unreadsOnly }) {
        yield* util_1.paginate({
            request: this._request,
            url: `/users/${userId}/conversations`,
            query: {
                limit,
                unreadsOnly,
                startingAfter,
                lastMessageAfter,
                lastMessageBefore
            }
        });
    }
}
class UserMethods {
    /**
        @internal
        @hidden
    */
    constructor(request) {
        this._request = request;
        this.sessions = new UserSessionMethods(this._request);
        this.conversations = new UserConversationMethods(this._request);
    }
    async create(userId, user) {
        return this.update(userId, user);
    }
    async get(userId) {
        return this._request('get', `/users/${userId}`);
    }
    async update(userId, user) {
        return this._request('put', `/users/${userId}`, {
            body: user
        });
    }
    async *list({ limit = 10, isOnline, startingAfter } = {}) {
        yield* util_1.paginate({
            request: this._request,
            url: '/users',
            query: {
                limit,
                isOnline,
                startingAfter
            }
        });
    }
}
exports.default = UserMethods;
//# sourceMappingURL=UserMethods.js.map